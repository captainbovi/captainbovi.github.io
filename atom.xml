<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>点滴生活 点滴人生</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-02T05:36:57.459Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>bovi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>神奇的display</title>
    <link href="http://example.com/2022/04/01/%E7%A5%9E%E5%A5%87%E7%9A%84display/"/>
    <id>http://example.com/2022/04/01/%E7%A5%9E%E5%A5%87%E7%9A%84display/</id>
    <published>2022-04-01T13:08:25.000Z</published>
    <updated>2022-04-02T05:36:57.459Z</updated>
    
    
    <summary type="html">&lt;p&gt;display可是个神奇的东西，通过修改display可以帮助组件实现“逆天改命”，变成其他组件的“模样”，当然，修炼之路不乏贫困，让我们一起来看看都有些什么神奇的display可供更改。&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>图片自适应大小</title>
    <link href="http://example.com/2022/04/01/%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F/"/>
    <id>http://example.com/2022/04/01/%E5%9B%BE%E7%89%87%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%A7%E5%B0%8F/</id>
    <published>2022-04-01T13:08:06.000Z</published>
    <updated>2022-04-01T13:28:16.960Z</updated>
    
    
    <summary type="html">&lt;p&gt;在一般设计中，插入图片有两种方式，一是在组件中添加background属性，一是通过&lt;img&gt;组件。两种方式实现自适应的方式大同小异。&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>居中</title>
    <link href="http://example.com/2022/04/01/%E5%B1%85%E4%B8%AD/"/>
    <id>http://example.com/2022/04/01/%E5%B1%85%E4%B8%AD/</id>
    <published>2022-04-01T13:07:47.000Z</published>
    <updated>2022-04-02T05:35:14.856Z</updated>
    
    
    <summary type="html">&lt;p&gt;居中的方式有很多，其中，有不少是伪居中，具体表现为看样子是居中了，但是详细查看位置后发现其实没有居中，在这里提供两种居中思路：绝对位置居中以及弹性盒子居中&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="http://example.com/categories/css/"/>
    
    
    <category term="css" scheme="http://example.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>JS的原型和原型链</title>
    <link href="http://example.com/2022/04/01/JS%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://example.com/2022/04/01/JS%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2022-04-01T12:59:07.000Z</published>
    <updated>2022-04-01T13:05:08.957Z</updated>
    
    
    <summary type="html">&lt;p&gt;讲原型的时候，我们应该先要记住以下几个要点，这几个要点是理解原型的关键：&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS高阶函数使用</title>
    <link href="http://example.com/2022/04/01/JS%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/04/01/JS%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</id>
    <published>2022-04-01T12:58:08.000Z</published>
    <updated>2022-04-01T13:05:18.316Z</updated>
    
    
    <summary type="html">&lt;p&gt;首先是for循环的一种简化写法，主要针对数组遍历&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>箭头函数</title>
    <link href="http://example.com/2022/04/01/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2022/04/01/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-01T12:57:54.000Z</published>
    <updated>2022-04-01T13:04:57.097Z</updated>
    
    
    <summary type="html">&lt;p&gt;箭头函数，是ES6语法中定义函数的一个非常方便的语法。通常我们在将一个函数作为参数传入另一个函数时使用箭头函数，我们先来看一个最简单的例子。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS中的回调函数</title>
    <link href="http://example.com/2022/04/01/JS%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2022/04/01/JS%E4%B8%AD%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/</id>
    <published>2022-04-01T12:57:40.000Z</published>
    <updated>2022-04-01T13:04:47.619Z</updated>
    
    
    <summary type="html">&lt;p&gt;什么是回调函数？回调的英文定义：A callback is a function that is passed as an argument to another function and is executed after its parent function has completed。（回调是一种函数，它将作为参数传递给另一个函数，并且在其父函数完成后执行。  ps.谷歌机翻）字面上的理解，回调函数就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数，这个过程就叫做回调。也就是说&lt;strong&gt;主函数的事先干完，回头再调用传进来的那个函数&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS类型判断</title>
    <link href="http://example.com/2022/04/01/JS%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://example.com/2022/04/01/JS%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</id>
    <published>2022-04-01T12:40:23.000Z</published>
    <updated>2022-04-01T12:41:55.072Z</updated>
    
    
    <summary type="html">&lt;p&gt;类型判断在 web 开发中有非常广泛的应用，简单的有判断数字还是字符串，进阶一点的有判断数组还是对象，再进阶一点的有判断日期、正则、错误类型，再再进阶一点还有比如判断 plainObject、空对象、Window 对象等等。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>This理解</title>
    <link href="http://example.com/2022/04/01/This%E7%90%86%E8%A7%A3/"/>
    <id>http://example.com/2022/04/01/This%E7%90%86%E8%A7%A3/</id>
    <published>2022-04-01T12:13:44.000Z</published>
    <updated>2022-04-01T12:42:06.909Z</updated>
    
    
    <summary type="html">&lt;p&gt;this，从字面意思上来讲，即这个。但这个，又是哪个呢？ 在使用this的时候常常会遇到一些问题，时常会出现this指向不明的问题（你以为的this并不是真正的this）。那让我们溯源一下，到底什么是this。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>javascript类型转换</title>
    <link href="http://example.com/2022/04/01/javascript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2022/04/01/javascript%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-04-01T07:10:10.000Z</published>
    <updated>2022-04-01T07:19:23.332Z</updated>
    
    
    <summary type="html">&lt;p&gt;Number() 转换为数字， String() 转换为字符串， Boolean() 转化为布尔值。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>谈谈表单</title>
    <link href="http://example.com/2022/04/01/%E8%B0%88%E8%B0%88%E8%A1%A8%E5%8D%95/"/>
    <id>http://example.com/2022/04/01/%E8%B0%88%E8%B0%88%E8%A1%A8%E5%8D%95/</id>
    <published>2022-04-01T06:04:05.000Z</published>
    <updated>2022-04-01T07:20:32.054Z</updated>
    
    
    <summary type="html">&lt;p&gt;表单，常常用于提交用户向服务器发送的消息，应用非常广泛，而整个表单又可以分为表单控件、提示信息、表单域这三大内容。&lt;/p&gt;</summary>
    
    
    
    <category term="javascript" scheme="http://example.com/categories/javascript/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来到我的博客</title>
    <link href="http://example.com/2022/04/01/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2022/04/01/%E6%AC%A2%E8%BF%8E%E6%9D%A5%E5%88%B0%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-04-01T05:41:56.000Z</published>
    <updated>2022-04-03T08:02:13.892Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我的本意其实并不是打算搭一个个人网站，只是想找个地方记录一下自己的一些学习笔记罢了。后来经过一些机缘巧合，我接触到了个人网站这一神奇的东西，同时还要感谢我的好兄弟王力可对我赞助（在此再次感谢），才让这一网站顺利搭成。不过由于服务器雀食太贵了，所以连夜携博文跑路，投奔gith</summary>
        
      
    
    
    
    
  </entry>
  
</feed>
